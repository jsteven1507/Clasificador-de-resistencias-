import numpy as np #librería en la que se define un tipo de dato que representa matrices multidimensionales
# además incluye algunas funcionalidades básicas para trabajar con ellas

import cv2 #OpenCV es una biblioteca libre de visión artificial originalmente desarrollada por Intel
import math # se importa la biblioteca math

imag="C:/Users/Steven/Documents/8 semestre/inteligencia artificial/Resistencias/330_14_10.jpg"
image=cv2.imread(imag) #Se importa la imagen de la direccion fijada

scale_percent = 25  # percent of original size
width = int(image.shape[1] * scale_percent / 100)
height = int(image.shape[0] * scale_percent / 100)
dim = (width, height)
# resize image
image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)

# se transforma a escala de grises la imagen de entrada
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# 2 Find Threshold
gray_blur = cv2.GaussianBlur(gray, (7, 7), 0)
bola = cv2.adaptiveThreshold(gray_blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 17, 3)

canny = cv2.Canny(bola, 150, 200)
#
cannyy = (cv2.dilate(canny, None, iterations=5))

cnts, hierarchy = cv2.findContours(cannyy, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
max = 0
pos_max = 0
for c in cnts:
    area = cv2.contourArea(c)
    if cv2.contourArea(c) > max:
        pos_max = c
        max = cv2.contourArea(c)
        rect_m = cv2.minAreaRect(c)
im = np.zeros_like(gray)

imas = cv2.drawContours(im, [pos_max], 0, (255, 255, 255), -1)
im = cv2.bitwise_and(imas, gray)
cv2.floodFill(im, None, (0, 0), 255)

image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
h = cv2.calcHist([image_hsv], [0], imas, [180], [6, 180])
s = cv2.calcHist([image_hsv], [1], imas, [255], [6, 254])
v = cv2.calcHist([image_hsv], [2], imas, [255], [0, 253])
mh = int(h.argmax())
ms = int(s.argmax())
mv = int(v.argmax())
# print(mh)
# print(ms)
# print(mv)
lim_inf = (mh - 74, 0, 0)
lim_sup = (mh + 200, ms + 50, 255)
mask_grass = cv2.inRange(image_hsv, lim_inf, lim_sup)
mask_not_grass = cv2.bitwise_not(mask_grass)

re, b = cv2.threshold(im, 2, 254, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
threshold = re - 10
ret, bolas = cv2.threshold(im, threshold, 255, cv2.THRESH_BINARY)

threshold = re - 125
ret, negro = cv2.threshold(im, threshold, 255, cv2.THRESH_BINARY)
# ret, bola = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
bolas = cv2.bitwise_not(bolas)

resul1 = cv2.bitwise_and(bolas, negro)
resul = cv2.bitwise_and(mask_not_grass, bolas)

m = 3
kernel = np.ones((m, m), np.uint8)
bolass = cv2.morphologyEx(resul, cv2.MORPH_OPEN, kernel)
bola = cv2.morphologyEx(bolass, cv2.MORPH_CLOSE, kernel)

canny = cv2.Canny(bola, 150, 200)
#
ite=3
cannyy = (cv2.dilate(canny, None, iterations=ite))

cnts, hierarchy = cv2.findContours(cannyy, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
max = 0
pos_max = 0
for c in cnts:
    rect = cv2.minAreaRect(c)
    centro, medidas, angulo = rect
    w, h = medidas
    if w > h:
        aspect_ratio = (w / h)
    else:
        aspect_ratio = (h / w)
    area = cv2.contourArea(c)
    if cv2.contourArea(c) > max:
        pos_max = c
        max = cv2.contourArea(c)
        rect_m = rect

i = np.zeros_like(gray)
#
an = cv2.drawContours(i, [pos_max], 0, (255, 255, 255), -1)


centro, medidas, angulo = rect_m
w, h = medidas
if w > h:
    lon = h
else:
    lon = w
m = int(lon / 2.4475)
kernel = np.ones((m, m), np.uint8)
bolass = cv2.morphologyEx(an, cv2.MORPH_OPEN, kernel)
bolass = cv2.morphologyEx(bolass, cv2.MORPH_CLOSE, kernel)
#
cnts, hierarchy = cv2.findContours(bolass, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
for c in cnts:
    rect = cv2.minAreaRect(c)
    centro, medidas, angulo = rect
    w, h = medidas
    if w > h:
        aspect_ratio = (w / h)
    else:
        aspect_ratio = (h / w)

    if (aspect_ratio > 2) and aspect_ratio <3.994:
        rect_m = rect
        aspect_ratio_m = aspect_ratio
box = cv2.boxPoints(rect_m)
box = np.int0(box)
#im = cv2.drawContours(image, [box], 0, (0, 255, 0), 2)

print(aspect_ratio_m)

centro, medidas, angulo = rect  # se obtienen las propiedades del rectangulo
w, h = medidas  # se obtiene ancho y altura

# Se encuentra los extremos del rectangulo dependiendo de la orientacion
if h > w:
    p1 = box[2]
    pts1 = np.array([box[2], box[3], box[1], box[0]], np.int32)
    y = int(h)
    x = int(w)

else:
    p1 = box[1]
    pts1 = np.array([box[1], box[2], box[0], box[3]], np.int32)
    y = int(w)
    x = int(h)

p10 = p1[0]
p11 = p1[1]

x = 17
y = 50
# se encuentran los puntos que tendria el rectangulo sin inclinacion
pts2 = np.array([p1, [p1[0] + y, p1[1]], [p1[0], p1[1] + x], [p1[0] + y, p1[1] + x]], np.int32)

# se realiza homografia con los pts1 y pts2
H, _ = cv2.findHomography(pts1, pts2, method=cv2.RANSAC)
image_w = cv2.warpPerspective(image, H, (image.shape[1], image.shape[0]))

#Se extrae la zona de la resistencia


pl = image_w[p11:p11 + x, p10:p10 + y]



plhsv=cv2.cvtColor(pl, cv2.COLOR_BGR2HSV) #se convierte a espacio HSV
hue,s,v=cv2.split(plhsv)

promedio=(np.mean( hue, axis=0)).astype(int)

vector=plhsv[8,:]
vector=vector[:,0]
lim_inf = (8,37, 30)
lim_sup = (56, 111,156)

maskk = cv2.inRange(plhsv, lim_inf, lim_sup) # se aplica la mascara de color
cnts, hierarchy = cv2.findContours(maskk, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
max = 0
pos_max = 0
succes=0
for c in cnts:
    if cv2.contourArea(c) > max:
        pos_max = c
        max = cv2.contourArea(c)
        succes=1
if succes == 1:
    i = np.zeros_like(maskk)
    #
    an = cv2.drawContours(i, [pos_max], 0, (255, 255, 255), -1)
    cnt = pos_max
    M = cv2.moments(cnt)
    cx = int(M['m10'] / M['m00'])
    print(cx)
    if cx<=25:
        vector=np.flip(vector)

print(vector)

cv2.imshow("Imgs",pl)

cv2.imshow("Im",cannyy)
cv2.imshow("I",bolass )
cv2.waitKey(0)
